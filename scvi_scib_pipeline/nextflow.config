
// workflow marapeters
params {
    // process params
    output_dir               = "results"
    publish_mode             = 'copy'

    // Main pipeline parameters
    sample_id = 'raw_outer_IA_WE_data_20250704'
    adata     = '/lustre/scratch127/cellgen/cellgeni/tickets/tic-4101/data/raw_outer_IA_WE_data_20250704.h5ad'
      // scVI parameters
    batch_key  = ['concatenated_integration_covariates']
    n_hidden   = [512, 1024, 2048]
    n_latent   = [26, 28, 30]
    n_layers   = [2, 3]
    dropout    = [0.1]
    lr         = [0.0001]
    batch_size = [512]
    likelihood = ['zinb', 'nb']
    n_epochs   = [100]
    layer      = ""
      // scIB parameters
    celltype_key = 'cell_type_lvl3'
    fraction     = 0.2
    lognorm    = true
    n_pca = 50
    hvg   = false
}
process {
    cpus          = 4
    queue         = 'normal'
    maxRetries    = 5
    errorStrategy = "retry"
    container     = '/nfs/cellgeni/singularity/images/scenicplus-fa55dae.sif'

    withName:scVI {
        ext.args            = {
            [
                params.layer ? "--layer ${params.layer}" : "",
            ].join(" ")
        }
        memory              = { 64.GB * task.attempt }
        queue               = 'gpu-cellgen-restricted'
        clusterOptions      = ' -gpu "num=4:mode=exclusive_process:gmodel=NVIDIAA100_SXM4_80GB"'
        containerOptions    = '--nv'
        publishDir          = [
            path: { "${params.output_dir}/scvi" },
            mode: "${params.publish_mode}",
        ]
    }
    withName:downsampleAdata {
        ext.args            = {
            [
                params.celltype_key ? "--celltype_key ${params.celltype_key}": "",
                params.fraction     ? "--fraction ${params.fraction}"        : "",
                params.lognorm ? "--lognorm"              : "",
                params.hvg     ? "--hvg"                  : "",
                params.n_pca   ? "--n_pca ${params.n_pca}": ""
            ].join(" ")
        }
        cpus                = 8
        memory              = { 300.GB * task.attempt + 400.GB * (task.attempt - 1) }
        queue               = { task.attempt == 1 ? 'normal' : 'teramem' }
        publishDir          = [
            path: { "${params.output_dir}/downsample" },
            mode: "${params.publish_mode}",
        ]
    }
    withName:scIBenchmark {
        ext.args            = {
            [
                params.celltype_key ? "--celltype_key ${params.celltype_key}" : "",
                params.batch_key    ? "--batch_key ${params.batch_key.join(',')}" : ""
            ].join(" ")
        }
        cpus                = 16
        memory              = { 300.GB * task.attempt + 400.GB * (task.attempt - 1) }
        queue               = { task.attempt == 1 ? 'normal' : 'teramem' }
    }
    withName:scIBPlot {
        cpus                = 2
        memory              = { 12.GB * task.attempt }
        queue               = 'normal'
        publishDir          = [
            path: { "${params.output_dir}/benchmark" },
            mode: "${params.publish_mode}",
        ]
    }
    withName:collectVersions {
        cpus   = 2
        memory = { 2.GB * task.attempt }
        queue  = 'normal'
        publishDir = [
            path: { "${params.output_dir}" },
            mode: "${params.publish_mode}",
        ]
    }
    // withName:downsample_adata {
    //     ext.args            = {
    //         [
    //             params.celltype_key ? "--celltype_key ${params.celltype_key}": "",
    //             params.fraction     ? "--fraction ${params.fraction}"        : ""
    //         ].join(" ")
    //     }
    //     memory              = { 30.GB * task.attempt }
    //     queue               = 'normal'
    //     publishDir          = [
    //         path: { "${params.output_dir}" },
    //         mode: "${params.publish_mode}",
    //     ]
    // }
    // withName:preprocess_pca {
    //     ext.args            = {
    //         [
    //             params.lognorm ? "--lognorm"              : "",
    //             params.hvg     ? "--hvg"                  : "",
    //             params.n_pca   ? "--n_pca ${params.n_pca}": ""

    //         ].join(" ")
    //     }
    //     memory              = { 30.GB * task.attempt }
    //     queue               = 'normal'
    //     publishDir          = [
    //         path: { "${params.output_dir}" },
    //         mode: "${params.publish_mode}",
    //     ]
    // }
}

singularity {
    enabled    = true
    autoMounts = true
    runOptions = '-B /lustre,/nfs'
    cacheDir   = '/nfs/cellgeni/singularity/images/'
}

executor {
    name           = 'lsf'
    perJobMemLimit = true
}

// Capturing Nextflow log files into a 'reports' directory
import java.time.*
Date now = new Date()

params {
    tracedir  = "reports"
    timestamp = now.format("yyyyMMdd-HH-mm-ss")
}

timeline {
    enabled = true
    file    = "${params.tracedir}/${params.timestamp}_timeline.html"
}

report {
    enabled = true
    file    = "${params.tracedir}/${params.timestamp}_report.html"
}

trace {
    enabled = true
    file    = "${params.tracedir}/${params.timestamp}_trace.tsv"
}

// Unscoped options
outputDir = params.output_dir
cleanup   = false
workDir   = "nf-work"